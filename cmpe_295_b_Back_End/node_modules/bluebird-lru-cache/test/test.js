// Generated by CoffeeScript 1.10.0
(function() {
  var BluebirdLRU, LRU, Promise, chai, chaiAsPromised, expect, key, value,
    slice = [].slice;

  chai = require('chai');

  chaiAsPromised = require('chai-as-promised');

  chai.use(chaiAsPromised);

  expect = chai.expect;

  LRU = require('lru-cache');

  BluebirdLRU = require('../index');

  Promise = require('bluebird');

  key = 'foo';

  value = 'bar';

  describe('Matching lru-cache API', function() {
    var bcache, fetchTests, lcache, matchingApi;
    bcache = BluebirdLRU({
      noreject: true
    });
    lcache = LRU();
    matchingApi = function() {
      var args, expected, method, result;
      method = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      result = bcache[method].apply(bcache, args);
      expected = lcache[method].apply(lcache, args);
      return expect(result).to.eventually.deep.equal(expected);
    };
    fetchTests = function() {
      it('get', function() {
        return matchingApi('get', key);
      });
      it('peek', function() {
        return matchingApi('peek', key);
      });
      it('has', function() {
        return matchingApi('has', key);
      });
      it('keys', function() {
        return matchingApi('keys');
      });
      return it('values', function() {
        return matchingApi('values');
      });
    };
    describe('after set', function() {
      it('set', function() {
        return matchingApi('set', key, value);
      });
      return fetchTests();
    });
    describe('after delete', function() {
      it('del', function() {
        return matchingApi('del', key);
      });
      return fetchTests();
    });
    return describe('after reset', function() {
      it('set again', function() {
        return matchingApi('set', key, value);
      });
      it('reset', function() {
        return matchingApi('reset', key);
      });
      return fetchTests();
    });
  });

  describe('Rejection divergence', function() {
    var bcache, rejectionApi;
    bcache = BluebirdLRU();
    rejectionApi = function() {
      var args, method, result;
      method = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      result = bcache[method].apply(bcache, args).then(function() {
        throw new Error();
      })["catch"](BluebirdLRU.NoSuchKeyError, function(err) {
        return err.key;
      });
      return expect(result).to.eventually.equal(key);
    };
    it('get', function() {
      return rejectionApi('get', key);
    });
    return it('peek', function() {
      return rejectionApi('peek', key);
    });
  });

  describe('Automatic fetching', function() {
    var autoFetchApi, bcache;
    bcache = BluebirdLRU({
      fetchFn: function(key) {
        return key + 'bar';
      }
    });
    autoFetchApi = function() {
      var args, method, result;
      method = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      result = bcache[method].apply(bcache, args);
      return expect(result).to.eventually.equal(key + 'bar');
    };
    it('get', function() {
      return autoFetchApi('get', key);
    });
    return it('peek', function() {
      return bcache.reset().then(function() {
        return autoFetchApi('peek', key);
      });
    });
  });

}).call(this);
